package com.mikedeejay2.mikedeejay2lib.gui.item;

import com.google.common.collect.Multimap;
import com.mikedeejay2.mikedeejay2lib.BukkitPlugin;
import com.mikedeejay2.mikedeejay2lib.gui.GUIContainer;
import com.mikedeejay2.mikedeejay2lib.gui.event.GUIEvent;
import com.mikedeejay2.mikedeejay2lib.gui.event.GUIEventHandler;
import com.mikedeejay2.mikedeejay2lib.item.IItemBuilder;
import com.mikedeejay2.mikedeejay2lib.item.ItemBuilder;
import com.mikedeejay2.mikedeejay2lib.text.Text;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.OfflinePlayer;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeModifier;
import org.bukkit.command.CommandSender;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;

import java.util.*;

/**
 * Represents an item in a GUI. Holds a few useful things such as:
 * <ul>
 *     <li>An {@link ItemBuilder}</li>
 *     <li>Whether or not it's movable in the GUI or not</li>
 *     <li>GUI Events ({@link GUIEventHandler})</li>
 * </ul>
 *
 * @author Mikedeejay2
 */
public class GUIItem implements Cloneable, IItemBuilder<ItemStack, GUIItem> {
    /**
     * The item builder
     */
    protected ItemBuilder item;
    /**
     * Whether this item can be moved
     */
    protected boolean movable;
    /**
     * GUI Events for this item
     */
    protected GUIEventHandler events;

    /**
     * Construct a new <code>GUIItem</code>
     *
     * @param item The reference base item
     */
    public GUIItem(ItemStack item) {
        this.item = ItemBuilder.of(item);
        this.movable = false;
        this.events = new GUIEventHandler();
    }

    /**
     * Construct a new <code>GUIItem</code>
     *
     * @param itemBuilder The reference item builder
     */
    public GUIItem(IItemBuilder<?, ?> itemBuilder) {
        this.item = ItemBuilder.of(itemBuilder);
        this.movable = false;
        this.events = new GUIEventHandler();
    }

    /**
     * Construct a new <code>GUIItem</code>
     * <p>
     * The item generated by this constructor is stone
     */
    public GUIItem() {
        this(new ItemStack(Material.STONE));
    }

    /**
     * Called when this <code>GUIItem</code> is clicked
     *
     * @param event The event of the click
     * @param gui   The GUI that was clicked on
     */
    public void onClick(InventoryClickEvent event, GUIContainer gui) {
        if(events == null) return;
        events.execute(event, gui);
    }

    /**
     * Returns whether this <code>GUIItem</code> is movable or not
     *
     * @return Move state
     */
    public boolean isMovable() {
        return movable;
    }

    /**
     * Set whether this <code>GUIItem</code> is movable or not
     *
     * @param movable Move state to set this item to
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem setMovable(boolean movable) {
        this.movable = movable;
        return this;
    }

    /**
     * Get the <code>GUIEventHandler</code> of this item
     *
     * @return the item event of this item
     */
    public GUIEventHandler getEvents() {
        return events;
    }

    /**
     * Get a <code>GUIEvent</code> based off of the event's class
     *
     * @param eventClass The class of the <code>GUIEvent</code> to get
     * @param <T>        The class type
     * @return The requested <code>GUIEvent</code>
     */
    public <T extends GUIEvent> T getEvent(Class<T> eventClass) {
        return events.getEvent(eventClass);
    }

    /**
     * Get a <code>GUIEvent</code> based off of the index of the event
     *
     * @param index The index that the <code>GUIEvent</code> is located at in the list
     * @return The requested event
     */
    public GUIEvent getEvent(int index) {
        return events.getEvent(index);
    }

    /**
     * Set the <code>GUIEventHandler</code> for this item
     *
     * @param events Events to set this item to use
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem setEvents(GUIEventHandler events) {
        this.events = events;
        return this;
    }

    /**
     * Add an event to this <code>GUIItem</code>
     *
     * @param event Event to add
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem addEvent(GUIEvent event) {
        events.addEvent(event);
        return this;
    }

    /**
     * Remove an event via instance
     *
     * @param event Event to remove
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem removeEvent(GUIEvent event) {
        events.removeEvent(event);
        return this;
    }

    /**
     * Remove an event via the event's class
     *
     * @param eventClass The class of the event to remove
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem removeEvent(Class<? extends GUIEvent> eventClass) {
        events.removeEvent(eventClass);
        return this;
    }

    /**
     * Returns whether the event instance exists in this <code>GUIEvent</code>
     *
     * @param event The event to search for
     * @return Whether the event exists in this item
     */
    public boolean containsEvent(GUIEvent event) {
        return events.containsEvent(event);
    }

    /**
     * Returns whether an event of a class exists in this <code>GUIEvent</code>
     *
     * @param eventClass The event class to search for
     * @return Whether the event exists in this item
     */
    public boolean containsEvent(Class<? extends GUIEvent> eventClass) {
        return events.containsEvent(eventClass);
    }

    /**
     * Reset the GUI Events for this item
     *
     * @return A reference to this <code>GUIItem</code>
     */
    public GUIItem resetEvents() {
        this.events = new GUIEventHandler();
        return this;
    }

    @Override
    public ItemStack get() {
        return this.item.get();
    }

    @Override
    public ItemStack get(Player player) {
        return this.item.get(player);
    }

    @Override
    public ItemStack get(CommandSender sender) {
        return this.item.get(sender);
    }

    @Override
    public ItemStack get(String locale) {
        return this.item.get(locale);
    }

    @Override
    public GUIItem set(ItemStack item) {
        this.item.set(item);
        return this;
    }

    @Override
    public ItemMeta getMeta() {
        return this.item.getMeta();
    }

    @Override
    public GUIItem setMeta(ItemMeta meta) {
        this.item.setMeta(meta);
        return this;
    }

    @Override
    public String getName() {
        return this.item.getName();
    }

    @Override
    public String getName(Player player) {
        return this.item.getName(player);
    }

    @Override
    public String getName(CommandSender sender) {
        return this.item.getName(sender);
    }

    @Override
    public String getName(String locale) {
        return this.item.getName(locale);
    }

    @Override
    public GUIItem setName(String name) {
        this.item.setName(name);
        return this;
    }

    @Override
    public GUIItem setName(Text text) {
        this.item.setName(text);
        return this;
    }

    @Override
    public int getAmount() {
        return this.item.getAmount();
    }

    @Override
    public GUIItem setAmount(int amount) {
        this.item.setAmount(amount);
        return this;
    }

    @Override
    public Material getType() {
        return this.item.getType();
    }

    @Override
    public GUIItem setType(Material material) {
        this.item.setType(material);
        return this;
    }

    @Override
    public boolean hasLore() {
        return this.item.hasLore();
    }

    @Override
    public List<String> getLore() {
        return this.item.getLore();
    }

    @Override
    public List<String> getLore(Player player) {
        return this.item.getLore(player);
    }

    @Override
    public List<String> getLore(CommandSender sender) {
        return this.item.getLore(sender);
    }

    @Override
    public List<String> getLore(String locale) {
        return this.item.getLore(locale);
    }

    @Override
    public GUIItem setLore(List<String> lore) {
        this.item.setLore(lore);
        return this;
    }

    @Override
    public GUIItem setLore(String... lore) {
        this.item.setLore(lore);
        return this;
    }

    @Override
    public GUIItem setLoreText(List<Text> lore) {
        this.item.setLoreText(lore);
        return this;
    }

    @Override
    public GUIItem setLore(Text... lore) {
        this.item.setLore(lore);
        return this;
    }

    @Override
    public GUIItem addLore(List<String> lore) {
        this.item.addLore(lore);
        return this;
    }

    @Override
    public GUIItem addLore(String... lore) {
        this.item.addLore(lore);
        return this;
    }

    @Override
    public GUIItem addLore(int index, List<String> lore) {
        this.item.addLore(index, lore);
        return this;
    }

    @Override
    public GUIItem addLore(int index, String... lore) {
        this.item.addLore(index, lore);
        return this;
    }

    @Override
    public GUIItem addLoreText(List<Text> lore) {
        this.item.addLoreText(lore);
        return this;
    }

    @Override
    public GUIItem addLore(Text... lore) {
        this.item.addLore(lore);
        return this;
    }

    @Override
    public GUIItem addLoreText(int index, List<Text> lore) {
        this.item.addLoreText(index, lore);
        return this;
    }

    @Override
    public GUIItem addLore(int index, Text... lore) {
        this.item.addLore(index, lore);
        return this;
    }

    @Override
    public Map<Enchantment, Integer> getEnchants() {
        return this.item.getEnchants();
    }

    @Override
    public boolean hasEnchant(Enchantment enchantment) {
        return this.item.hasEnchant(enchantment);
    }

    @Override
    public int getEnchant(Enchantment enchantment) {
        return this.item.getEnchant(enchantment);
    }

    @Override
    public GUIItem removeEnchant(Enchantment enchantment) {
        this.item.removeEnchant(enchantment);
        return this;
    }

    @Override
    public GUIItem addEnchant(Enchantment enchantment, int level) {
        this.item.addEnchant(enchantment, level);
        return this;
    }

    @Override
    public boolean hasConflictingEnchant(Enchantment enchantment) {
        return this.item.hasConflictingEnchant(enchantment);
    }

    @Override
    public GUIItem addItemFlags(ItemFlag... flags) {
        this.item.addItemFlags(flags);
        return this;
    }

    @Override
    public GUIItem removeItemFlags(ItemFlag... flags) {
        this.item.removeItemFlags(flags);
        return this;
    }

    @Override
    public boolean hasItemFlag(ItemFlag flag) {
        return this.item.hasItemFlag(flag);
    }

    @Override
    public Set<ItemFlag> getItemFlags() {
        return this.item.getItemFlags();
    }

    @Override
    public GUIItem addItemFlag(ItemFlag flag) {
        this.item.addItemFlag(flag);
        return this;
    }

    @Override
    public GUIItem addGlow() {
        this.item.addGlow();
        return this;
    }

    @Override
    public GUIItem removeGlow() {
        this.item.removeGlow();
        return this;
    }

    @Override
    public GUIItem setEmptyName() {
        this.item.setEmptyName();
        return this;
    }

    @Override
    public GUIItem setUnbreakable(boolean unbreakable) {
        this.item.setUnbreakable(unbreakable);
        return this;
    }

    @Override
    public boolean isUnbreakable() {
        return this.item.isUnbreakable();
    }

    @Override
    public OfflinePlayer getHeadOwner() {
        return this.item.getHeadOwner();
    }

    @Override
    public GUIItem setHeadOwner(OfflinePlayer player) {
        this.item.setHeadOwner(player);
        return this;
    }

    @Override
    public String getHeadBase64() {
        return this.item.getHeadBase64();
    }

    @Override
    public GUIItem setHeadBase64(String base64) {
        this.item.setHeadBase64(base64);
        return this;
    }

    @Override
    public boolean hasAttributeModifiers() {
        return this.item.hasAttributeModifiers();
    }

    @Override
    public Multimap<Attribute, AttributeModifier> getAttributeModifiers() {
        return this.item.getAttributeModifiers();
    }

    @Override
    public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot slot) {
        return this.item.getAttributeModifiers(slot);
    }

    @Override
    public Collection<AttributeModifier> getAttributeModifiers(Attribute attribute) {
        return this.item.getAttributeModifiers(attribute);
    }

    @Override
    public GUIItem addAttributeModifier(Attribute attribute, AttributeModifier modifier) {
        this.item.addAttributeModifier(attribute, modifier);
        return this;
    }

    @Override
    public GUIItem addAttributeModifiers(Attribute attribute, AttributeModifier... modifiers) {
        this.item.addAttributeModifiers(attribute, modifiers);
        return this;
    }

    @Override
    public GUIItem setAttributeModifiers(Multimap<Attribute, AttributeModifier> attributeModifiers) {
        this.item.setAttributeModifiers(attributeModifiers);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifier(Attribute attribute) {
        this.item.removeAttributeModifier(attribute);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifiers(Attribute... attributes) {
        this.item.removeAttributeModifiers(attributes);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifier(EquipmentSlot slot) {
        this.item.removeAttributeModifier(slot);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifiers(EquipmentSlot... slots) {
        this.item.removeAttributeModifiers(slots);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifier(Attribute attribute, AttributeModifier modifier) {
        this.item.removeAttributeModifier(attribute, modifier);
        return this;
    }

    @Override
    public GUIItem removeAttributeModifiers(Attribute attribute, AttributeModifier... modifiers) {
        this.item.removeAttributeModifiers(attribute, modifiers);
        return this;
    }

    @Override
    public PersistentDataContainer getPersistentDataContainer() {
        return this.item.getPersistentDataContainer();
    }

    @Override
    public GUIItem setCustomModelData(Integer data) {
        this.item.setCustomModelData(data);
        return this;
    }

    @Override
    public int getCustomModelData() {
        return this.item.getCustomModelData();
    }

    @Override
    public boolean hasCustomModelData() {
        return this.item.hasCustomModelData();
    }

    @Override
    public GUIItem setLocalizedName(String name) {
        this.item.setLocalizedName(name);
        return this;
    }

    @Override
    public String getLocalizedName() {
        return this.item.getLocalizedName();
    }

    @Override
    public boolean hasLocalizedName() {
        return this.item.hasLocalizedName();
    }

    @Override
    public String getDisplayName() {
        return this.item.getDisplayName();
    }

    @Override
    public GUIItem setDisplayName(String name) {
        this.item.setDisplayName(name);
        return this;
    }

    @Override
    public boolean hasDisplayName() {
        return this.item.hasDisplayName();
    }

    @Override
    public int getDurability() {
        return this.item.getDurability();
    }

    @Override
    public GUIItem setDurability(int durability) {
        this.item.setDurability(durability);
        return this;
    }

    @Override
    public int getMaxStackSize() {
        return this.item.getMaxStackSize();
    }

    @Override
    public boolean hasDurability() {
        return this.item.hasDurability();
    }

    @Override
    public <Y, Z> GUIItem setData(NamespacedKey key, PersistentDataType<Y, Z> type, Z value) {
        this.item.setData(key, type, value);
        return this;
    }

    @Override
    public <Y, Z> GUIItem setData(BukkitPlugin plugin, String key, PersistentDataType<Y, Z> type, Z value) {
        this.item.setData(plugin, key, type, value);
        return this;
    }

    @Override
    public <Y, Z> boolean hasData(NamespacedKey key, PersistentDataType<Y, Z> type) {
        return this.item.hasData(key, type);
    }

    @Override
    public <Y, Z> boolean hasData(BukkitPlugin plugin, String key, PersistentDataType<Y, Z> type) {
        return this.item.hasData(plugin, key, type);
    }

    @Override
    public <Y, Z> Z getData(NamespacedKey key, PersistentDataType<Y, Z> type) {
        return this.item.getData(key, type);
    }

    @Override
    public <Y, Z> Z getData(BukkitPlugin plugin, String key, PersistentDataType<Y, Z> type) {
        return this.item.getData(plugin, key, type);
    }

    @Override
    public <Y, Z> Z getOrDefaultData(NamespacedKey key, PersistentDataType<Y, Z> type, Z defaultValue) {
        return this.item.getOrDefaultData(key, type, defaultValue);
    }

    @Override
    public <Y, Z> Z getOrDefaultData(BukkitPlugin plugin, String key, PersistentDataType<Y, Z> type, Z defaultValue) {
        return this.item.getOrDefaultData(plugin, key, type, defaultValue);
    }

    @Override
    public GUIItem removeData(NamespacedKey key) {
        this.item.removeData(key);
        return this;
    }

    @Override
    public GUIItem removeData(BukkitPlugin plugin, String key) {
        this.item.removeData(plugin, key);
        return this;
    }

    @Override
    public GUIItem removeData(NamespacedKey... keys) {
        this.item.removeData(keys);
        return this;
    }

    @Override
    public GUIItem removeData(BukkitPlugin plugin, String... keys) {
        this.item.removeData(plugin, keys);
        return this;
    }

    @Override
    public boolean isDataEmpty() {
        return this.item.isDataEmpty();
    }

    /**
     * Clone the <code>GUIItem</code>
     *
     * @return The new clones <code>GUIItem</code>
     */
    @Override
    public GUIItem clone() {
        GUIItem newItem;

        try {
            newItem = (GUIItem) super.clone();
        } catch(CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }

        if(item != null) {
            newItem.item = item.clone();
        }

        if(events != null) {
            newItem.events = events.clone();
        }
        return newItem;
    }
}
